# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mHgYBD8_TyAF0mq9-70GZlx3iaZI4CUG

# **MIMIC 3 Download using WFDB Python Package**

---

download the package.
"""

# Commented out IPython magic to ensure Python compatibility.
from IPython.display import display
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np
import os
import shutil
import posixpath
import pandas as pd

import wfdb

"""**Record example**

Read a WFDB record using the 'rdrecord' function into a wfdb.Record object.

Plot the signals, and show the data.

The file '3141595_0001' hosted on PhysioNet https://physionet.org/content/mimic3wdb/31/3141595/.
"""

record =wfdb.rdrecord('3141595_0001', pn_dir='mimic3wdb/31/3141595/')
wfdb.plot_wfdb(record=record, title='Record 3141595_0001 from PhysioNet mimic3wdb')
display(record.__dict__)
record = wfdb.rdrecord('3141595n', pn_dir='mimic3wdb/31/3141595/')
wfdb.plot_wfdb(record=record, title='Record 3141595n from PhysioNet mimic3wdb')
display(record.__dict__)

"""Read certain channels and sections of the WFDB record using the simplified 'rdsamp' function
which returns a numpy array and a dictionary. Show the data.

**ppg** 2888500 samples = 6 hours, 15 minutes, and 8 seconds, at 125 samples per second. \
**blood pressure** 1938730 samlples = 22 days at 1 sample per second
"""

ppg_signals, ppg_fields = wfdb.rdsamp('3141595_0001', pn_dir='mimic3wdb/31/3141595/', channel_names=['PLETH'])
bp_signals, bp_fields = wfdb.rdsamp('3141595n', pn_dir='mimic3wdb/31/3141595/',
                                    channel_names=['NBP', 'NBP Sys', 'NBP Dias', 'NBP Mean'])
ppg_signals_df = pd.DataFrame(ppg_signals)
ppg_fields = pd.Series(ppg_fields)
print(ppg_signals_df)
print(ppg_fields)
bp_signals_df = pd.DataFrame(bp_signals)
bp_fields = pd.Series(bp_fields)
print(bp_signals_df)
print(bp_fields)

"""filter blood presure nan values."""

filtered_array_indices = {}
filtered_array = {}
for i, field in enumerate(bp_fields['sig_name']):
    filtered_array_indices[field] = np.where(np.isnan(bp_signals[:, i]) == False)
    filtered_array[field] = bp_signals[filtered_array_indices[field], i]
    print(filtered_array_indices[field])

display("blood presure filtered data indices:", filtered_array_indices)
display("blood presure filtered data:", filtered_array)